import javax.imageio.ImageIO;
import javax.swing.JPanel;
import java.awt.*;
import java.awt.image.*;
import java.io.File;
import java.io.IOException;

public class GamePanel extends JPanel implements Runnable {
	//Variables
	public static int WIDTH = 60 * 32;
	public static int HEIGHT = 60 * 32;
	
	private Thread thread;
	private boolean running;
	
	private BufferedImage image;
	private Image img = ImageIO.read(new File("C:/Users/Barýþ/Desktop/AI_Game_Project/Game_AI/assets/grass_32.png"));
	private Graphics2D g;
	private Map m;
	
	private int FPS = 60;
	private double averageFPS;
	
	//Constructor
	public GamePanel() throws IOException {
		super();
		setPreferredSize(new Dimension (WIDTH, HEIGHT));
		setFocusable(true);
		requestFocus();
		m = new Map();
	}
	
	//Functions
	public void addNotify() {
		super.addNotify();
		if (thread == null) {
			thread = new Thread(this);
			thread.start();
		}
	}
	
	public void run() {
		running = true;
		
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		g = (Graphics2D) image.getGraphics();
		
		long startTime;
		long URDTimeMilis;
		long waitTime;
		long totalTime = 0;
		
		int frameCount = 0;
		int maxFrameCount = 60;
		
		long targetTime = 1000 / FPS;
		
		//Game Loop
		while(running) {
			
			startTime = System.nanoTime();
			
			gameUpdate();
			gameRender();
			gameDraw();
			
			URDTimeMilis = (System.nanoTime() - startTime) / 1000000;
			
			waitTime = targetTime - URDTimeMilis;
			
			try {
				Thread.sleep(waitTime);
			}
			catch(Exception e) {
				
			}
			
			totalTime += System.nanoTime() - startTime;
			frameCount++;
			if (frameCount == maxFrameCount) {
				averageFPS = 1000.0 / ((totalTime / frameCount) / 1000000);
				frameCount = 0;
				totalTime = 0;
				
			}
		}
	}


	private void gameDraw() {
		
		
	}


	private void gameRender() {
		g.setColor(Color.RED);
		for (int i = 0; i < 60; i++ )
		{
			for (int j = 0; j < 60; j++ )
			{
				g.drawImage(img, i*32, j*32, null);
			}
		}
		g.drawString("FPS: " + averageFPS, 10, 10);
		//draw all tiles
		
		
	}


	private void gameUpdate() {
		Graphics g2 = this.getGraphics();
		g2.drawImage(image, 0, 0, null);
		g2.dispose();
	}
}
