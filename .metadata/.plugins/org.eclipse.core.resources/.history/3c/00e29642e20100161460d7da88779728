import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

public class GameControllers extends javax.swing.JFrame {
	GamePanel gamePanel;
	public Map m;
	public Map m2;
	private static final long serialVersionUID = 1L;
	
	public static final int WIDTH = 1280;
	public static final int HEIGHT = 720;
	public static final double SCALE = 1;
	public static final String NAME = "Game";
	
	private Thread thread;
	private boolean running;
	
	private BufferedImage image;
	private Graphics2D g;
	
	private int FPS = 60;
	private double averageFPS;
	
	public GameControllers() throws java.io.IOException{
		final Map m = new Map();
		m.setTileType(5, 5, 1);
		
		final Map m2  = new Map(1);
		
		final javax.swing.JPanel panel = new javax.swing.JPanel();
		panel.setPreferredSize(new java.awt.Dimension(400, 720));
		
		final GamePanel gamePanel = new GamePanel(m);
		gamePanel.setPreferredSize(new java.awt.Dimension(1920, 1920));

        final javax.swing.JScrollPane scroll = new javax.swing.JScrollPane(gamePanel);

		setMinimumSize(new java.awt.Dimension((int)(WIDTH * SCALE), (int)(HEIGHT * SCALE)));
		setMaximumSize(new java.awt.Dimension((int)(WIDTH * SCALE), (int)(HEIGHT * SCALE)));
		setPreferredSize(new java.awt.Dimension((int)(WIDTH * SCALE), (int)(HEIGHT * SCALE)));
		
		setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
		setLayout(new java.awt.BorderLayout());
		
		add(panel, java.awt.BorderLayout.EAST);
        add(scroll, java.awt.BorderLayout.CENTER);
        setVisible(true);  
        
        // Variables declaration
    	javax.swing.JButton end_turn;
        javax.swing.JButton next_move;
    	javax.swing.JScrollPane jScrollPane1;
        javax.swing.JScrollPane jScrollPane2;
        javax.swing.JSeparator jSeparator1;
        javax.swing.JSeparator jSeparator2;
        javax.swing.JButton neutral_map;
        javax.swing.JButton player1_map;
        javax.swing.JButton player2_map;
        javax.swing.JTextArea player_info;
        javax.swing.JTextArea tile_info;
        // End of variables declaration
        
        next_move = new javax.swing.JButton();
        end_turn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        player2_map = new javax.swing.JButton();
        neutral_map = new javax.swing.JButton();
        player1_map = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tile_info = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        player_info = new javax.swing.JTextArea();

        next_move.setText("Next Move");
        next_move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.out.println("You clicked Next Move");
            }
        });

        end_turn.setText("End Turn");
        end_turn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.out.println("You clicked End Turn");
            }
        });

        player2_map.setText("Player2 Map");
        player2_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.out.println("You clicked Player 2");
            }
        });

        neutral_map.setText("Neutral Map");
        neutral_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.out.println("You clicked neutral map");
                gamePanel.setM(m);
            }
        });

        player1_map.setText("Player1 Map");
        player1_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	System.out.println("You clicked Player 1");
                gamePanel.setM(m2);
            }
        });

        String tileInfo = "\nTile info at x: 1, y: 2\nHealth : " + gamePanel.getSelectedTile().getType() + "\nI got the tile. \nOooh yeah!";
        tile_info.setEditable(false);
        tile_info.setText(tileInfo);
        jScrollPane1.setViewportView(tile_info);

        String playerInfo = "Player X: ";
        player_info.setEditable(false);
        player_info.setText(playerInfo);
        jScrollPane2.setViewportView(player_info);

        
        //Need to add external JAR swing.jar to project buildpath to work! it is in the assets folder.
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(panel);
        panel.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1)
                .add(jSeparator2)
                .add(layout.createSequentialGroup()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(48, 48, 48)
                            .add(next_move, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(end_turn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(neutral_map)
                            .add(18, 18, 18)
                            .add(player1_map)
                            .add(18, 18, 18)
                            .add(player2_map)))
                    .add(43, 43, 43))
                .add(layout.createSequentialGroup()
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(18, 18, 18)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(player1_map)
                        .add(player2_map)
                        .add(neutral_map))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(end_turn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(next_move, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(26, 26, 26))
            );
        
        pack();
		
		setResizable(false);
		setLocationRelativeTo(null);
	}
	
	
	public void addNotify() {
		super.addNotify();
		if (thread == null) {
			thread = new Thread();
			thread.start();
		}
	}
	
	public void run() {
		running = true;
		
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		g = (Graphics2D) image.getGraphics();
		
		long startTime;
		long URDTimeMilis;
		long waitTime;
		long totalTime = 0;
		
		int frameCount = 0;
		int maxFrameCount = 60;
		
		long targetTime = 1000 / FPS;
		
		//Game Loop
		while(running) {
			
			startTime = System.nanoTime();
			
			gameUpdate();
			gameRender();
			
			URDTimeMilis = (System.nanoTime() - startTime) / 1000000;
			
			waitTime = targetTime - URDTimeMilis;
			
			try {
				Thread.sleep(waitTime);
			}
			catch(Exception e) {
				
			}
			
			totalTime += System.nanoTime() - startTime;
			frameCount++;
			if (frameCount == maxFrameCount) {
				averageFPS = 1000.0 / ((totalTime / frameCount) / 1000000);
				frameCount = 0;
				totalTime = 0;
				
			}
		}
	}

	private void gameRender() {
		g.setColor(Color.RED);
		//drawing the map
		g.drawString("FPS: " + averageFPS, 10, 10);
		//draw all tiles
	}


	private void gameUpdate() {
		Graphics g2 = this.getGraphics();
		g2.drawImage(image, 0, 0, null);
		g2.dispose();
	}
	
}
